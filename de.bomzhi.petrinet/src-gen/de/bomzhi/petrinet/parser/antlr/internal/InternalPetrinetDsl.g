/*
* generated by Xtext
*/
grammar InternalPetrinetDsl;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package de.bomzhi.petrinet.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package de.bomzhi.petrinet.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import de.bomzhi.petrinet.services.PetrinetDslGrammarAccess;

}

@parser::members {

 	private PetrinetDslGrammarAccess grammarAccess;
 	
    public InternalPetrinetDslParser(TokenStream input, PetrinetDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "PetriNet";	
   	}
   	
   	@Override
   	protected PetrinetDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRulePetriNet
entryRulePetriNet returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPetriNetRule()); }
	 iv_rulePetriNet=rulePetriNet 
	 { $current=$iv_rulePetriNet.current; } 
	 EOF 
;

// Rule PetriNet
rulePetriNet returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getPetriNetAccess().getResourcesResourceParserRuleCall_0_0()); 
	    }
		lv_resources_0_0=ruleResource		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPetriNetRule());
	        }
       		add(
       			$current, 
       			"resources",
        		lv_resources_0_0, 
        		"Resource");
	        afterParserOrEnumRuleCall();
	    }

)
)+(
(
		{ 
	        newCompositeNode(grammarAccess.getPetriNetAccess().getPlacesPlaceParserRuleCall_1_0()); 
	    }
		lv_places_1_0=rulePlace		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPetriNetRule());
	        }
       		add(
       			$current, 
       			"places",
        		lv_places_1_0, 
        		"Place");
	        afterParserOrEnumRuleCall();
	    }

)
)+(
(
		{ 
	        newCompositeNode(grammarAccess.getPetriNetAccess().getTransactionsTransactionParserRuleCall_2_0()); 
	    }
		lv_transactions_2_0=ruleTransaction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPetriNetRule());
	        }
       		add(
       			$current, 
       			"transactions",
        		lv_transactions_2_0, 
        		"Transaction");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
;





// Entry rule entryRuleResource
entryRuleResource returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getResourceRule()); }
	 iv_ruleResource=ruleResource 
	 { $current=$iv_ruleResource.current; } 
	 EOF 
;

// Rule Resource
ruleResource returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='resource' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getResourceAccess().getResourceKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getResourceAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getResourceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRulePlace
entryRulePlace returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPlaceRule()); }
	 iv_rulePlace=rulePlace 
	 { $current=$iv_rulePlace.current; } 
	 EOF 
;

// Rule Place
rulePlace returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='place' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPlaceAccess().getPlaceKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getPlaceAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPlaceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPlaceAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPlaceAccess().getStoragesStorageParserRuleCall_3_0()); 
	    }
		lv_storages_3_0=ruleStorage		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPlaceRule());
	        }
       		add(
       			$current, 
       			"storages",
        		lv_storages_3_0, 
        		"Storage");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getPlaceAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleStorage
entryRuleStorage returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStorageRule()); }
	 iv_ruleStorage=ruleStorage 
	 { $current=$iv_ruleStorage.current; } 
	 EOF 
;

// Rule Storage
ruleStorage returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getStorageRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getStorageAccess().getResourceRefResourceCrossReference_0_0()); 
	}

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getStorageAccess().getColonKeyword_1());
    }
(
(
		lv_count_2_0=RULE_INT
		{
			newLeafNode(lv_count_2_0, grammarAccess.getStorageAccess().getCountINTTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStorageRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"count",
        		lv_count_2_0, 
        		"INT");
	    }

)
)	otherlv_3='/' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getStorageAccess().getSolidusKeyword_3());
    }
((
(
		lv_capacity_4_0=RULE_INT
		{
			newLeafNode(lv_capacity_4_0, grammarAccess.getStorageAccess().getCapacityINTTerminalRuleCall_4_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStorageRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"capacity",
        		lv_capacity_4_0, 
        		"INT");
	    }

)
)
    |	otherlv_5='..' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getStorageAccess().getFullStopFullStopKeyword_4_1());
    }
))
;





// Entry rule entryRuleTransaction
entryRuleTransaction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTransactionRule()); }
	 iv_ruleTransaction=ruleTransaction 
	 { $current=$iv_ruleTransaction.current; } 
	 EOF 
;

// Rule Transaction
ruleTransaction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='transaction' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTransactionAccess().getTransactionKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getTransactionAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTransactionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTransactionAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTransactionAccess().getAssureStatementsAssureStatementParserRuleCall_3_0()); 
	    }
		lv_assureStatements_3_0=ruleAssureStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransactionRule());
	        }
       		add(
       			$current, 
       			"assureStatements",
        		lv_assureStatements_3_0, 
        		"AssureStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getTransactionAccess().getTakeStatementsTakeStatementParserRuleCall_4_0()); 
	    }
		lv_takeStatements_4_0=ruleTakeStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransactionRule());
	        }
       		add(
       			$current, 
       			"takeStatements",
        		lv_takeStatements_4_0, 
        		"TakeStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getTransactionAccess().getPutStatementsPutStatementParserRuleCall_5_0()); 
	    }
		lv_putStatements_5_0=rulePutStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransactionRule());
	        }
       		add(
       			$current, 
       			"putStatements",
        		lv_putStatements_5_0, 
        		"PutStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getTransactionAccess().getRightCurlyBracketKeyword_6());
    }
)
;





// Entry rule entryRuleAssureStatement
entryRuleAssureStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAssureStatementRule()); }
	 iv_ruleAssureStatement=ruleAssureStatement 
	 { $current=$iv_ruleAssureStatement.current; } 
	 EOF 
;

// Rule AssureStatement
ruleAssureStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='assure' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAssureStatementAccess().getAssureKeyword_0());
    }
(
(
		lv_count_1_0=RULE_INT
		{
			newLeafNode(lv_count_1_0, grammarAccess.getAssureStatementAccess().getCountINTTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAssureStatementRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"count",
        		lv_count_1_0, 
        		"INT");
	    }

)
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getAssureStatementRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getAssureStatementAccess().getResourceRefResourceCrossReference_2_0()); 
	}

)
)	otherlv_3='in' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getAssureStatementAccess().getInKeyword_3());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getAssureStatementRule());
	        }
        }
	otherlv_4=RULE_ID
	{
		newLeafNode(otherlv_4, grammarAccess.getAssureStatementAccess().getPlaceRefPlaceCrossReference_4_0()); 
	}

)
))
;





// Entry rule entryRuleTakeStatement
entryRuleTakeStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTakeStatementRule()); }
	 iv_ruleTakeStatement=ruleTakeStatement 
	 { $current=$iv_ruleTakeStatement.current; } 
	 EOF 
;

// Rule TakeStatement
ruleTakeStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='take' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTakeStatementAccess().getTakeKeyword_0());
    }
(
(
		lv_count_1_0=RULE_INT
		{
			newLeafNode(lv_count_1_0, grammarAccess.getTakeStatementAccess().getCountINTTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTakeStatementRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"count",
        		lv_count_1_0, 
        		"INT");
	    }

)
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTakeStatementRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getTakeStatementAccess().getResourceRefResourceCrossReference_2_0()); 
	}

)
)	otherlv_3='from' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTakeStatementAccess().getFromKeyword_3());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTakeStatementRule());
	        }
        }
	otherlv_4=RULE_ID
	{
		newLeafNode(otherlv_4, grammarAccess.getTakeStatementAccess().getPlaceRefPlaceCrossReference_4_0()); 
	}

)
))
;





// Entry rule entryRulePutStatement
entryRulePutStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPutStatementRule()); }
	 iv_rulePutStatement=rulePutStatement 
	 { $current=$iv_rulePutStatement.current; } 
	 EOF 
;

// Rule PutStatement
rulePutStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='put' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPutStatementAccess().getPutKeyword_0());
    }
(
(
		lv_count_1_0=RULE_INT
		{
			newLeafNode(lv_count_1_0, grammarAccess.getPutStatementAccess().getCountINTTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPutStatementRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"count",
        		lv_count_1_0, 
        		"INT");
	    }

)
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getPutStatementRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getPutStatementAccess().getResourceRefResourceCrossReference_2_0()); 
	}

)
)	otherlv_3='into' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getPutStatementAccess().getIntoKeyword_3());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getPutStatementRule());
	        }
        }
	otherlv_4=RULE_ID
	{
		newLeafNode(otherlv_4, grammarAccess.getPutStatementAccess().getPlaceRefPlaceCrossReference_4_0()); 
	}

)
))
;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


